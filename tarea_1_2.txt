login as: ec2-user
ec2-user@ec2-3-234-154-133.compute-1.amazonaws.com's password:
Last login: Thu Nov 14 19:25:57 2019 from vpath.banrural.com.gt

       __|  __|_  )
       _|  (     /   Amazon Linux AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-ami/2018.03-release-notes/
[ec2-user@ip-10-100-21-44 ~]$ ls
demo.pem  devops-foundations
[ec2-user@ip-10-100-21-44 ~]$ sudo su orlando.aldana
[orlando.aldana@ip-10-100-21-44 ec2-user]$ ls
ls: cannot open directory .: Permission denied
[orlando.aldana@ip-10-100-21-44 ec2-user]$ exit
exit
[ec2-user@ip-10-100-21-44 ~]$ ls
demo.pem  devops-foundations
[ec2-user@ip-10-100-21-44 ~]$ sudo su orlando.aldana
[orlando.aldana@ip-10-100-21-44 ec2-user]$ ls
ls: cannot open directory .: Permission denied
[orlando.aldana@ip-10-100-21-44 ec2-user]$ cd
[orlando.aldana@ip-10-100-21-44 ~]$ ls
[orlando.aldana@ip-10-100-21-44 ~]$ cd ..
[orlando.aldana@ip-10-100-21-44 home]$ ls
agarcia          enriquer           jorge.deleon     orlando.aldana
alfredo.morales  fpineda8181        lagaguate        siomara.simon
asic             francisco.asensio  lester.martinez  toyogua
cquex            gnavarro1408       luis.jimenez     victor_padilla
diego.romero     guandalini54       luis.pineda      warteaga
dlopez           hhuard             Lzdiaz           yonathancastaneda
ec2-user         higomez            mazariegos
edgar.ortiz      hugo.garrido       mgarcia
emgarcia         Jlanuza            omar.mendoza
[orlando.aldana@ip-10-100-21-44 home]$ cd orlando.aldana/
[orlando.aldana@ip-10-100-21-44 ~]$ ls
[orlando.aldana@ip-10-100-21-44 ~]$ git clone https://github.com/usr24281/devops                                     -foundations-1.git
Cloning into 'devops-foundations-1'...
remote: Enumerating objects: 220, done.
remote: Counting objects: 100% (220/220), done.
remote: Compressing objects: 100% (114/114), done.
remote: Total 220 (delta 101), reused 185 (delta 69), pack-reused 0
Receiving objects: 100% (220/220), 295.96 KiB | 22.77 MiB/s, done.
Resolving deltas: 100% (101/101), done.
[orlando.aldana@ip-10-100-21-44 ~]$ ls
devops-foundations-1
[orlando.aldana@ip-10-100-21-44 ~]$ cd devops-foundations-1/
[orlando.aldana@ip-10-100-21-44 devops-foundations-1]$ ls
answers  docs  LICENSE  mkdocs.yml  source
[orlando.aldana@ip-10-100-21-44 devops-foundations-1]$ cd source/
[orlando.aldana@ip-10-100-21-44 source]$ ls
infrastructure-as-code
[orlando.aldana@ip-10-100-21-44 source]$ cd infrastructure-as-code/
[orlando.aldana@ip-10-100-21-44 infrastructure-as-code]$ ls
iac-terraform1  iac-terraform2-bootstrap  networking-demo
[orlando.aldana@ip-10-100-21-44 infrastructure-as-code]$ ls
iac-terraform1  iac-terraform2-bootstrap  networking-demo
[orlando.aldana@ip-10-100-21-44 infrastructure-as-code]$ ls
iac-terraform1  iac-terraform2-bootstrap  networking-demo
[orlando.aldana@ip-10-100-21-44 infrastructure-as-code]$ cd iac-terraform1
[orlando.aldana@ip-10-100-21-44 iac-terraform1]$ ls
creds.tf  ec2.tf  sg.tf  variables.tf
[orlando.aldana@ip-10-100-21-44 iac-terraform1]$ terraform init

Initializing the backend...

Initializing provider plugins...
- Checking for available provider plugins...
- Downloading plugin for provider "aws" (hashicorp/aws) 2.35.0...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.aws: version = "~> 2.35"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
[orlando.aldana@ip-10-100-21-44 iac-terraform1]$ terraform plan
var.name
  Enter a value: orlando.aldana

Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

data.aws_ami.amazon_linux_ec2: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.terraform-lab1 will be created
  + resource "aws_instance" "terraform-lab1" {
      + ami                          = "ami-00eb20669e0990cb4"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = "us-east-1a"
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t3.nano"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "demo"
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = "subnet-0d45a460e80029489"
      + tags                         = {
          + "Name" = "orlando.aldana"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_security_group.security_group will be created
  + resource "aws_security_group" "security_group" {
      + arn                    = (known after apply)
      + description            = "Security group for instance orlando.aldana"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "orlando.aldana-sg"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + vpc_id                 = "vpc-04022def7485261bb"
    }

  # aws_security_group_rule.egress_access will be created
  + resource "aws_security_group_rule" "egress_access" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 65535
      + type                     = "egress"
    }

  # aws_security_group_rule.ssh_ingress_access will be created
  + resource "aws_security_group_rule" "ssh_ingress_access" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

Plan: 4 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

[orlando.aldana@ip-10-100-21-44 iac-terraform1]$ terraform apply
var.name
  Enter a value: orlando.aldana

data.aws_ami.amazon_linux_ec2: Refreshing state...

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.terraform-lab1 will be created
  + resource "aws_instance" "terraform-lab1" {
      + ami                          = "ami-00eb20669e0990cb4"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = "us-east-1a"
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t3.nano"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "demo"
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = "subnet-0d45a460e80029489"
      + tags                         = {
          + "Name" = "orlando.aldana"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_security_group.security_group will be created
  + resource "aws_security_group" "security_group" {
      + arn                    = (known after apply)
      + description            = "Security group for instance orlando.aldana"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "orlando.aldana-sg"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + vpc_id                 = "vpc-04022def7485261bb"
    }

  # aws_security_group_rule.egress_access will be created
  + resource "aws_security_group_rule" "egress_access" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 65535
      + type                     = "egress"
    }

  # aws_security_group_rule.ssh_ingress_access will be created
  + resource "aws_security_group_rule" "ssh_ingress_access" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

Plan: 4 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_security_group.security_group: Creating...
aws_security_group.security_group: Creation complete after 0s [id=sg-0410865bb64                                     869a1f]
aws_security_group_rule.ssh_ingress_access: Creating...
aws_security_group_rule.egress_access: Creating...
aws_instance.terraform-lab1: Creating...
aws_security_group_rule.ssh_ingress_access: Creation complete after 1s [id=sgrul                                     e-1990517022]
aws_security_group_rule.egress_access: Creation complete after 1s [id=sgrule-121                                     5644197]
aws_instance.terraform-lab1: Still creating... [10s elapsed]
aws_instance.terraform-lab1: Creation complete after 12s [id=i-0e123915f26c80056                                     ]

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.
[orlando.aldana@ip-10-100-21-44 iac-terraform1]$
